Linux note 
==============================================================================================================================================================
session 1
==============================================================================================================================================================

#######################
What is Operating System 
#######################

-> OS acts as mediator between users and computer hardware components

-> OS provides user interface to work with computer

-> OS is mandatory to use any computer

Ex: Windows, Linux, MAC, Android & IOS etc....


-> Windows is single user based OS
-> Windows is paid software
-> Windows developed by Microsoft
-> Security features are less in windows OS
-> Recommended for personal use


-> Linux is free & Open source OS
-> Linux is multi user based OS
-> Security is high in Linux
-> It is recommended for Severs, Databases, Applications execution
-> Linux is community based OS

-> Linux OS developed by 'Linux Torvalds'

###########################
Linux Distributions / Flavors
###########################

RED Hat Linux
Amazon Linux
Ubuntu
Cent OS
SUSE
Kali Linux
Debian Linux
Fedora etc...


Note: 200+ Linux Distributions are available


#########################
Linux Environment Setup
########################

1) We can install using Virtual Box (Hypervisior / VM Ware)

2) We can use Cloud Provided Virtual Machine ( AWS EC2 Instance )


Note: AWS EC2 instances are free for 1 year (Monthly 750 hours)


-> Create EC2 Linux VM and connect to it using MobaXterm
==============================================================================================================================================================
Session 2
==============================================================================================================================================================

##############
Session-02
##############

-> Linux VM we will operate with Commands (CLI)

-> In Linux everthing will be represented as a file

1) Normal Files (text files)

2) Directories (Folder)

################
Linux Commands
################

# To make directory
mkdir <dir-name>

# To delete empty directory
rmdir  <dir-name>

# To list all files & directories in present working directory
ls -l

# To print present working directory
pwd

# To move inside the directory
cd <dir-name>

# To come out from the directory
cd ..


# To create empty files

touch <filename>

# To create multiple empty files 

touch f1.txt f2.txt f3.txt

# Create file with data (old data will be removed)

cat  >  f1.txt

Note: After writing data press 'CTRL + d' to save and close that file

# Append data to existing file

cat >> f1.txt

# Print file data

cat f1.txt

# To delete a file 

rm <filename>

# To delete non-empty directories

rm -r <dirname>

Note: '-r' represents recursive


# Rename files & directories (We can move from one directory to another directory

mv <present-name> <new-name>

mv <source-dir>  <target-dir>


# copy data from one file to another file

cat f1.txt > f2.txt

# copy two files data into single file

cat f1.txt f2.txt f3.txt > ashokit.txt

# copy file

cp f1.txt f2.txt

==============================================================================================================================================================
Session 3
==============================================================================================================================================================

##########################################
Previous Session : Linux Basic Commands
##########################################

cat : It is used to print file data from top to bottom

tac : It is reverse of cat (Prints file data from bottom to top)

head : It is used to print file data from top to bottom  (by default it prints first 10 lines only)

		$ head sbi.log  (it reads first 10 lines)

		$ head -n 25 sbi.log  (it reads first 25 lines)

		$ head -n 50 sbi.log (it reads first 50 lines )

tail : It is used to print file data from bottom to top (by default it prints last 10 lines)

		$ tail sbi.log  (it reads last 10 lines data)
		
		$ tail -n 25 sbi.log (it reads last 25 lines data)

		$ tail +25 sbi.log (It reads from 25th line to bottom)



Note: Application log messages will be appended at bottom of the file. To read latest log messages we need to use 'tail' command.


wc : It is used to print no.of lines, no.of words and no.of characters in given file

	$ wc ashokit.txt

##########
GREP 
#########

-> Grep stands for 'Global Regular Expression Print'

-> It is used to find the data in the file  (CTRL + F)

-> Grep cmd will process the text line by line it prints the lines which are matched with given pattern

	
		$ grep 'Linux' ashokit.txt   (It will print all lines which contains Linux keyword)

		$ grep -i 'Linux' ashokit.txt (Ignore case sensitive)

		$ grep -i 'NullPointerException' sbi.log

		$ grep -i 'Linux' *  (It will search for Exception keyword in all the files and prints which contains that )

		$ grep -R 'Linux'  (It will search in present directory and sub-directories also)


############
Vi Text Editor
############

-> In Windows OS Notepad is the default text editor (It in default in Windows)

-> In Linux OS we will use 'VI' text editor (It is default in Linux)

$ vi ashokit.txt

-> press 'i' in keyboard to enter into 'insert mode'

-> write the data in the file

-> Press 'Esc' then press :wq to save and close that file


Note: To close the file without saving we will use  ==>  :q!



#############
SED Command
#############

-> SED stands for stream editor

-> Using SED command we can replace the text without opening the file

# It will replace Linux word with Unix and prints output to terminal
$  sed 's/Linux/Unix'  linux.txt

# It will repace Linux word with Unix word in the file
$ sed -i 's/Linux/Unix' linux.txt

-> Using sed command we can delete lines also in the file

# it will delete 3rd line in the linux.txt file

$ sed -i '3d' linux.txt

# Delete last line of the file

$ sed  -i '$d' linux.txt

# Delete from nth line

$ sed -i '12,$d' linux.txt


###########################
cat
tac
wc
head
tail
grep
vi
sed
########################




==============================================================================================================================================================
==============================================================================================================================================================
Session 4
#####################################
Today's Topic : File Permissions In Linux
####################################

-> A file can have 3 types permissions

	1) Read (r)

	2) Write (w)

	3) Execute (x)

-> File permissions are divided into 3 secions

Section-1 : User permissions   (first 3 characters represents user permissions)

Section-2 : Group Permissions  (from 4th to 6th character represents group permissions)

Section-3 : Others Permissions (From 7th to 9th character represents others permissions)



->  rwxrwxrwx
     
	User --> having read, write & execute permissions

	Group --> having read, write & execute permissions

	Others --> having read, write & execute permissions


->  rw-rw-r--

	User -->    read & write
 
      Group -->  read & write

      Others -->  only read

->   r--r--r-x

	User -->    read 
 
      Group -->  read 

      Others -->  read & execute


->   -r-xr-x--x

	user --> read & execute
	
	Group  --> read & execute

	Others --> Only execute


->   d-w---x---

	user  -->  only wite

       group  -->  only execute

       Others --> No permission
	

	
########################
Modifying File Permissions
########################

-> Using 'chmod' command we can change file permissions in Linux OS

-> Using 'chmod' we can add and remove permissions


Note:  '+' represents adding  '-'  represents removing


# Add execute permission for the user
$ chmod u+x ashokit.txt

# Remove execute permission for the user
$ chmod u-x ashokit.txt

# Add execute permission for the group
$ chmod g+x ashokit.txt

# Add write permission for user
$ chmod u+w ashokit.txt

# Remove write permission for the group
$ chmod g-w ashokit.txt

# Remove write & execute pemissions for the group
$ chmod g-wx ashokit.txt

# Add write and execute permission for the user
$ chmod u+wx ashokit.txt

# Add execute permission for others
$ chmod o+x ashokit.txt


####################################
File Permissions with Numeric Numbers
######################################

0  --> No permission

1  --> Only Execute

2  --> Only Write

3  --> Execute & Write

4  --> Only Read

5  --> Read & Execute

6  --> Read & Write

7  --> Read, Write & Execute


$ chmod 777 players.txt

user -> rwx
group -> rwx
other -> rwx

$ chmod 765 players.txt

user --> rwx
group -> rw
others -> rx


#################################
Working with User Accounts in Linux
################################

-> Linux is a multi-user operating system

-> With in one linux machine we can create multiple user accounts

-> Multiple users can access one linux vm at a time and they can perform Multi-tasking


Note: Every linux machine will have 'root' account ( super user --> sudo )


-> When we launch a linux vm using 'Amazon Linux AMI' we will get 'ec2-user' account by default


# Switch to root user

$ sudo su

Note: To perform admin activities we will use 'sudo' permission


#################
Create user in linux
#################

# create user
$ sudo useradd  <username>

# verify user account details
$ id <username>

# List all users in Linux
$ cat /etc/passwd

# delete user
$ sudo userdel <username>

# Display all groups 
$ cat /etc/group

# Create a group
$ sudo groupadd <groupname>

# Add user to a group
$ sudo usermod -aG <group-name> <user-name>

# Remove user from the group
$ sudo gpasswd -d <username> <group-name>

# Delete group
$ sudo groupdel <group-name>

# print users who are belongs to particular group
$ sudo lid -g <group-name>
$ sudo su ramesh


======================================================================================================================================================
Session 5
=====================================================================================================================================================


#########
chown
########

-> 'chown' command is used to change file ownership

-> We can see owner of the file using 'ls -l' command

# changing owner of a file

$ sudo chown <uname> <filename>

-> We can change file owner using userID also

$ sudo chown <UID> <filename>

Note: We can get UID fo username using 'id uname' command

$ id ramesh

# change group of a file
$ sudo chown :groupName <fileName>



####################################
Working with locate and find commands
####################################

-> find and locate commands are used to search files in Linux Machine

# search files which contains apache
$ locate apache

# search files and display count which contains apache
$ locate -c apache

# print all .txt files
$ locate *.txt

# print the count of all .txt files
$ locate -c *.txt

Note: In Linux, all the files and directories locations will be stored in local db i.e locate db. When we execute locate command it will search in locate db (it will not search in actual file system). 


-> find command will search for the files and directories in actual linux file system

-> find command providing advanced searching techniques

# find files under home directory

$ find /home -name f1.txt

# display only empty files
$ sudo find /home -type f -empty

# display only empty directories
$ sudo find /home -type d -empty

Note: find command will search in entire linux file system


Note: To get documentation of any command we can use 'man' command


#######################

$ man find

$ man locate

$ man ping

#######################

# ifconfig  : It is used to print ip address of our machine

$ ifconfig

# wget   : It is used to download a file based on URL

$ wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.65/bin/apache-tomcat-9.0.65.tar.gz

# curl  : It is used to send HTTP request to URL

$ curl https://ashokit-sb-rest-api.herokuapp.com/

# ping : It is used to check network connectivity

	$ ping www.google.com



###########################################
How to deploy  website in Linux Machine
###########################################

-> To run web applications we need webserver

Note : httpd we can use as a webserver (It is apache webserver)

$ sudo yum update

$ sudo yum install httpd

$ sudo service httpd start

Note: Enable HTTP Protocol with 80 port in Security group (inbound rules) of our EC2 instance.

-> Ater enabling 80 port in security group we can access our website using EC2 instance public ip.

-> To change web page content we can use below commands

$ cd /var/www/html

$ sudo vi index.html  (write the content in index.html file and save it)

-> Now access EC2 instance public ip in browser



#####################################
How to install required softwares in Linux
#####################################

$ sudo yum install git
$ git --version

$ sudo yum install maven
$ mvn -version

$ sudo yum install java
$ java -version

====================================================================================================================================================
Session 6
====================================================================================================================================================
Q) What is Webserver?

Ans) It is used to run web applications

Ex: httpd

############################################
How to deploy one simple website in httpd server
###########################################

-> httpd is a webserver package

$ sudo yum install httpd

$ sudo service httpd start

Note: httpd web server runs on 'HTTP Protocol with 80 port number'

-> We can access this webserver using EC2 Instance public ip address

Note: Enable HTTP Protocol in Security Group (Inbound Rule)

$ cd /var/www/html

$ vi index.html  (Write content here)


# We can remove httpd server from our machine
$ sudo yum remove httpd


#################
Package Manager
#################

-> It is a tool that allows the users to install, remove, upgrade softwares on an operating system

Ex:   yum, apt, rpm, deb, chocklate etc........

-> Linux Package Managers are used to install, remove, upgrade packages in linux os

###################
What is a package?
###################

-> Package means it is one application

Ex:  httpd, git, maven, java, docker, jenkins etc......


#####################################
Which package manager we need to use ?
#####################################

RPM Based Linux Distributions : Amazon Linux, Red Hat Linux, Cent OS etc...

	Package Managers : yum, rpm, dnf

DEB based Linux Distributions : Ubuntu Linux, Debian Linux etc....
	
	Package Manager : apt


#######################
Top 5 Package Managers
#######################

1) YUM : Yellowdog Updater, Modified
2) APT : Advanced Packaging Tool
3) RPM : Red Hat Package Manager
4) DPKG : Debian Package Management System
5) DNF : Dandified YUM


Q) How to install webserver in Red Hat Linux?

$ sudo yum install httpd

Q) How to install webserver in Ubuntu ?

$ sudo apt install apache2

############################
How to install java 1.8 version
###############################

$ sudo yum install java-1.8.0-openjdk

==============================================================================================================================================================
Session ---7
==============================================================================================================================================================


###############
Shell Scripting
###############

++++++++++++++
What is shell ?
++++++++++++++

-> Shell is responsible for reading commands given by user

-> Shell will verify command and will give instructions to kernel to process that command 

-> If command is invalid shell will give error

-> Kernel will execute our command with System Hard Components

-> Shell acts as mediator between User and Kernel

+++++++++++++++++++
What is Scripting ?
+++++++++++++++++++

-> Scripting means set of commands mentioned in a file for execution

-> Scripting is used to automate our routine work


-> For example i want to execute below commands every day as a linux user

$ date
$ cal
$ whoami
$ pwd
$ ls -l

-> Instead of executing all these commands manually we can keep them in a file and we can execute that file.

-> The file which contains set of commands for execution is called as 'Script file'

######################
What is Shell Scripting ?
######################

-> Shell Scripting is used to execute set of commands using a script file

-> When we execute script file then shell will read those commands and will verify commands syntx

-> Shell will give instructions to 'Kernel'

-> Kernel will give instructions to hardware components to perform actual operation



##############
Types of Shells
###############

-> There are several shells available in linux OS

1) Bourne Shell
2) Bash Shell
3) Korn Shell
4) CShell
5) TShell
6) ZShell


# Display all the shells of our linux machines
$ cat /etc/shells

# Display the default shell of our linux machine
$ echo $SHELL


Note: The most commonly used shell in linux in is 'BASH SHELL'. 



Note: Shell Script files will have .sh extension

###################################
Working with First Shell Script Program
###################################

# Create a script file
$ vi task.sh

whoami
pwd
date

-> Save the file and close it (ESC +  :wq)

# Run the shell script (Option-1)
$ sh task.sh

Note: If we get permission denied then we should provide 'execute' permission using 'chmod' command

# Run the shell script (Option-2)
$ ./task.sh



##############################
What is sha-bang in shell script ?
##############################

-> Sha-bang is used to specify which shell should be used to process our script

Syntax : 

#! /bin/bash



***************Shell Script - 2*************
#! /bin/bash

echo "Welcome to Scripting"
echo "Scripting is used to automate regular work"
echo "Scripting requires lot of practise"

*****************Shell Script - 3 ***********************

#! /bin/bash

echo "Enter your name:"
read name
echo "Good Morning $name"

********************* Shell Script - 4 ******************************

#! /bin/bash

a=10
b=20

c=$(($a + $b))

echo "Sum of $a and $b is =  $c"


*************************** Shell Script - 5 *******************************

#! /bin/bash

echo "Enter First Number"
read a
echo "Enter Second Number"
read b

c=$(($a + $b))

echo "Sum of $a and $b is =  $c"

END



*********************************
Variables
Control Statements
Case Statements
Loops
Functions
*********************************


-> Variables are place-holders to store the value

-> Varibles are key-value pairs

-> In Shell Scripting there is no concept of Data Type.

-> Every value will be treated as text/string


Ex:

name=ashok
age=30
email=ashokitschool@gmail.com
phno=1234

-> Variables are divided into 2 types


1) Environment Variables or System variables
2) User Defined Variables


-> The variables which are already defined and using by our system are called as Environment/System variables

Ex:

$ echo $USER
$ echo $SHELL


-> Based on our requirement we can define our own variables those are called as user defined variables

Ex:

name=ashok
age=30

$echo $name $ age


################
Variable Rules
#################

-> We should not use special symbols like -, @, # etc....
-> Variable name should not start with digit

Note: It is recommended to use uppercase characters for variable name



-> we can use 'readonly' for variable so that variable value modification will not be allowed

########################
Command Line Arguments
########################

-> The arguments which will pass to script file at the time of execution

-> Cmd args are used to supply the values dynamically to the script file

Ex:

$ sh demo.sh ashokit 30

-> We can access cmd args in script file like below

$# - no.of args
$0 - script file name
$1 - First Cmd Arg
$2 - Second Cmd Arg
$3 - Third Cmd Arg
$* -  All Cmd Args



-> To comment any single line we can use '#'

echo 'hi'
#echo 'hello'


-> We can comment multiple lines also in script file like below

<<COMMENT
	.....................

COMMENT


-> We can hold script execution for some time using 'sleep' command

#! /bin/bash

echo $#
echo $0
echo $1
sleep 30s
echo $2
#echo $*


#######################
Conditional Statements
########################

-> Conditional statements are used to execute commands based on condition

Syntax:

if [ conition ]
then
	stmts
else
	stmts
fi

-> If given condition satisfied then if statments will be executed otherwise else statements will be executed


if [ condition ]
then
	stmts
elif [ condition ]
then
	stmts
else
	stmts
fi


Ex:

#!/bin/bash

echo "Enter Your Favorite Color"

read COLOR

if [ $COLOR == 'red' ]
then
        echo "Your are cheerful"
elif [ $COLOR == 'blue' ]
then
        echo "You are joyful"
else
         echo "You are lucky"
fi


###################
Working with loops
###################

-> Loops are used to execute stmts multiple times

-> We can use 2 types of loops

		1) Range based loop  ( ex: for loop )
		2) Conditional based loop ( ex: while loop )


################
For Loop Example
################

#! /bin/bash

for ((i=1; i<=10; i++))
do
echo "$i"
done

###################
While loop Example
####################

#! /bin/bash
i=10
while [ $i -ge 0 ]
do
echo "$i"
let i--;
done


#################
Infinite Loop
################

#! /bin/bash
while true
do
echo "This is my loop stmt"
done

Note: To stop infinite loop we will use  'ctrl + c'




##############
Functions 
##############


-> The big task can be divided into smaller tasks using functions

-> Function is used to perform an action / task

-> Using functions we can divide our tasks logically

-> Functions are re-usable

Syntax:

function functionaName( ) {

     // commands to execute
}


#######################
Writing welcome function
########################

#! /bin/bash

function welcome(){
  echo "Welcome to functions...";
  echo "I am learning Shell Scripting";
  echo "Shell Scripting is used to automate our regular work";
}

# call the function
welcome

########################
Function with Parameters
########################

#! /bin/bash

function welcome ( ) {
     echo "$1";
}

# call function
welcome Linux
welcome AWS
welcome DevOps

























































































































































	









	






















#####################################################################